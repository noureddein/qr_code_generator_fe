/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WrapperImport } from './routes/_wrapper'
import { Route as IdImport } from './routes/$id'
import { Route as WrapperRegisterImport } from './routes/_wrapper/register'
import { Route as WrapperLoginImport } from './routes/_wrapper/login'
import { Route as WrapperAuthenticatedImport } from './routes/_wrapper/_authenticated'
import { Route as WrapperAuthenticatedVcardImport } from './routes/_wrapper/_authenticated/vcard'
import { Route as WrapperAuthenticatedUrlImport } from './routes/_wrapper/_authenticated/url'
import { Route as WrapperAuthenticatedTextImport } from './routes/_wrapper/_authenticated/text'
import { Route as WrapperAuthenticatedMyCodesImport } from './routes/_wrapper/_authenticated/my-codes'
import { Route as WrapperAuthenticatedEmailImport } from './routes/_wrapper/_authenticated/email'

// Create Virtual Routes

const WrapperAuthenticatedProfileLazyImport = createFileRoute(
  '/_wrapper/_authenticated/profile',
)()

// Create/Update Routes

const WrapperRoute = WrapperImport.update({
  id: '/_wrapper',
  getParentRoute: () => rootRoute,
} as any)

const IdRoute = IdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => rootRoute,
} as any)

const WrapperRegisterRoute = WrapperRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => WrapperRoute,
} as any)

const WrapperLoginRoute = WrapperLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => WrapperRoute,
} as any)

const WrapperAuthenticatedRoute = WrapperAuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => WrapperRoute,
} as any)

const WrapperAuthenticatedProfileLazyRoute =
  WrapperAuthenticatedProfileLazyImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => WrapperAuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_wrapper/_authenticated/profile.lazy').then(
      (d) => d.Route,
    ),
  )

const WrapperAuthenticatedVcardRoute = WrapperAuthenticatedVcardImport.update({
  id: '/vcard',
  path: '/vcard',
  getParentRoute: () => WrapperAuthenticatedRoute,
} as any)

const WrapperAuthenticatedUrlRoute = WrapperAuthenticatedUrlImport.update({
  id: '/url',
  path: '/url',
  getParentRoute: () => WrapperAuthenticatedRoute,
} as any)

const WrapperAuthenticatedTextRoute = WrapperAuthenticatedTextImport.update({
  id: '/text',
  path: '/text',
  getParentRoute: () => WrapperAuthenticatedRoute,
} as any)

const WrapperAuthenticatedMyCodesRoute =
  WrapperAuthenticatedMyCodesImport.update({
    id: '/my-codes',
    path: '/my-codes',
    getParentRoute: () => WrapperAuthenticatedRoute,
  } as any)

const WrapperAuthenticatedEmailRoute = WrapperAuthenticatedEmailImport.update({
  id: '/email',
  path: '/email',
  getParentRoute: () => WrapperAuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$id': {
      id: '/$id'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof IdImport
      parentRoute: typeof rootRoute
    }
    '/_wrapper': {
      id: '/_wrapper'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WrapperImport
      parentRoute: typeof rootRoute
    }
    '/_wrapper/_authenticated': {
      id: '/_wrapper/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WrapperAuthenticatedImport
      parentRoute: typeof WrapperImport
    }
    '/_wrapper/login': {
      id: '/_wrapper/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof WrapperLoginImport
      parentRoute: typeof WrapperImport
    }
    '/_wrapper/register': {
      id: '/_wrapper/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof WrapperRegisterImport
      parentRoute: typeof WrapperImport
    }
    '/_wrapper/_authenticated/email': {
      id: '/_wrapper/_authenticated/email'
      path: '/email'
      fullPath: '/email'
      preLoaderRoute: typeof WrapperAuthenticatedEmailImport
      parentRoute: typeof WrapperAuthenticatedImport
    }
    '/_wrapper/_authenticated/my-codes': {
      id: '/_wrapper/_authenticated/my-codes'
      path: '/my-codes'
      fullPath: '/my-codes'
      preLoaderRoute: typeof WrapperAuthenticatedMyCodesImport
      parentRoute: typeof WrapperAuthenticatedImport
    }
    '/_wrapper/_authenticated/text': {
      id: '/_wrapper/_authenticated/text'
      path: '/text'
      fullPath: '/text'
      preLoaderRoute: typeof WrapperAuthenticatedTextImport
      parentRoute: typeof WrapperAuthenticatedImport
    }
    '/_wrapper/_authenticated/url': {
      id: '/_wrapper/_authenticated/url'
      path: '/url'
      fullPath: '/url'
      preLoaderRoute: typeof WrapperAuthenticatedUrlImport
      parentRoute: typeof WrapperAuthenticatedImport
    }
    '/_wrapper/_authenticated/vcard': {
      id: '/_wrapper/_authenticated/vcard'
      path: '/vcard'
      fullPath: '/vcard'
      preLoaderRoute: typeof WrapperAuthenticatedVcardImport
      parentRoute: typeof WrapperAuthenticatedImport
    }
    '/_wrapper/_authenticated/profile': {
      id: '/_wrapper/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof WrapperAuthenticatedProfileLazyImport
      parentRoute: typeof WrapperAuthenticatedImport
    }
  }
}

// Create and export the route tree

interface WrapperAuthenticatedRouteChildren {
  WrapperAuthenticatedEmailRoute: typeof WrapperAuthenticatedEmailRoute
  WrapperAuthenticatedMyCodesRoute: typeof WrapperAuthenticatedMyCodesRoute
  WrapperAuthenticatedTextRoute: typeof WrapperAuthenticatedTextRoute
  WrapperAuthenticatedUrlRoute: typeof WrapperAuthenticatedUrlRoute
  WrapperAuthenticatedVcardRoute: typeof WrapperAuthenticatedVcardRoute
  WrapperAuthenticatedProfileLazyRoute: typeof WrapperAuthenticatedProfileLazyRoute
}

const WrapperAuthenticatedRouteChildren: WrapperAuthenticatedRouteChildren = {
  WrapperAuthenticatedEmailRoute: WrapperAuthenticatedEmailRoute,
  WrapperAuthenticatedMyCodesRoute: WrapperAuthenticatedMyCodesRoute,
  WrapperAuthenticatedTextRoute: WrapperAuthenticatedTextRoute,
  WrapperAuthenticatedUrlRoute: WrapperAuthenticatedUrlRoute,
  WrapperAuthenticatedVcardRoute: WrapperAuthenticatedVcardRoute,
  WrapperAuthenticatedProfileLazyRoute: WrapperAuthenticatedProfileLazyRoute,
}

const WrapperAuthenticatedRouteWithChildren =
  WrapperAuthenticatedRoute._addFileChildren(WrapperAuthenticatedRouteChildren)

interface WrapperRouteChildren {
  WrapperAuthenticatedRoute: typeof WrapperAuthenticatedRouteWithChildren
  WrapperLoginRoute: typeof WrapperLoginRoute
  WrapperRegisterRoute: typeof WrapperRegisterRoute
}

const WrapperRouteChildren: WrapperRouteChildren = {
  WrapperAuthenticatedRoute: WrapperAuthenticatedRouteWithChildren,
  WrapperLoginRoute: WrapperLoginRoute,
  WrapperRegisterRoute: WrapperRegisterRoute,
}

const WrapperRouteWithChildren =
  WrapperRoute._addFileChildren(WrapperRouteChildren)

export interface FileRoutesByFullPath {
  '/$id': typeof IdRoute
  '': typeof WrapperAuthenticatedRouteWithChildren
  '/login': typeof WrapperLoginRoute
  '/register': typeof WrapperRegisterRoute
  '/email': typeof WrapperAuthenticatedEmailRoute
  '/my-codes': typeof WrapperAuthenticatedMyCodesRoute
  '/text': typeof WrapperAuthenticatedTextRoute
  '/url': typeof WrapperAuthenticatedUrlRoute
  '/vcard': typeof WrapperAuthenticatedVcardRoute
  '/profile': typeof WrapperAuthenticatedProfileLazyRoute
}

export interface FileRoutesByTo {
  '/$id': typeof IdRoute
  '': typeof WrapperAuthenticatedRouteWithChildren
  '/login': typeof WrapperLoginRoute
  '/register': typeof WrapperRegisterRoute
  '/email': typeof WrapperAuthenticatedEmailRoute
  '/my-codes': typeof WrapperAuthenticatedMyCodesRoute
  '/text': typeof WrapperAuthenticatedTextRoute
  '/url': typeof WrapperAuthenticatedUrlRoute
  '/vcard': typeof WrapperAuthenticatedVcardRoute
  '/profile': typeof WrapperAuthenticatedProfileLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$id': typeof IdRoute
  '/_wrapper': typeof WrapperRouteWithChildren
  '/_wrapper/_authenticated': typeof WrapperAuthenticatedRouteWithChildren
  '/_wrapper/login': typeof WrapperLoginRoute
  '/_wrapper/register': typeof WrapperRegisterRoute
  '/_wrapper/_authenticated/email': typeof WrapperAuthenticatedEmailRoute
  '/_wrapper/_authenticated/my-codes': typeof WrapperAuthenticatedMyCodesRoute
  '/_wrapper/_authenticated/text': typeof WrapperAuthenticatedTextRoute
  '/_wrapper/_authenticated/url': typeof WrapperAuthenticatedUrlRoute
  '/_wrapper/_authenticated/vcard': typeof WrapperAuthenticatedVcardRoute
  '/_wrapper/_authenticated/profile': typeof WrapperAuthenticatedProfileLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$id'
    | ''
    | '/login'
    | '/register'
    | '/email'
    | '/my-codes'
    | '/text'
    | '/url'
    | '/vcard'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$id'
    | ''
    | '/login'
    | '/register'
    | '/email'
    | '/my-codes'
    | '/text'
    | '/url'
    | '/vcard'
    | '/profile'
  id:
    | '__root__'
    | '/$id'
    | '/_wrapper'
    | '/_wrapper/_authenticated'
    | '/_wrapper/login'
    | '/_wrapper/register'
    | '/_wrapper/_authenticated/email'
    | '/_wrapper/_authenticated/my-codes'
    | '/_wrapper/_authenticated/text'
    | '/_wrapper/_authenticated/url'
    | '/_wrapper/_authenticated/vcard'
    | '/_wrapper/_authenticated/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IdRoute: typeof IdRoute
  WrapperRoute: typeof WrapperRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IdRoute: IdRoute,
  WrapperRoute: WrapperRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$id",
        "/_wrapper"
      ]
    },
    "/$id": {
      "filePath": "$id.tsx"
    },
    "/_wrapper": {
      "filePath": "_wrapper.tsx",
      "children": [
        "/_wrapper/_authenticated",
        "/_wrapper/login",
        "/_wrapper/register"
      ]
    },
    "/_wrapper/_authenticated": {
      "filePath": "_wrapper/_authenticated.tsx",
      "parent": "/_wrapper",
      "children": [
        "/_wrapper/_authenticated/email",
        "/_wrapper/_authenticated/my-codes",
        "/_wrapper/_authenticated/text",
        "/_wrapper/_authenticated/url",
        "/_wrapper/_authenticated/vcard",
        "/_wrapper/_authenticated/profile"
      ]
    },
    "/_wrapper/login": {
      "filePath": "_wrapper/login.tsx",
      "parent": "/_wrapper"
    },
    "/_wrapper/register": {
      "filePath": "_wrapper/register.tsx",
      "parent": "/_wrapper"
    },
    "/_wrapper/_authenticated/email": {
      "filePath": "_wrapper/_authenticated/email.tsx",
      "parent": "/_wrapper/_authenticated"
    },
    "/_wrapper/_authenticated/my-codes": {
      "filePath": "_wrapper/_authenticated/my-codes.tsx",
      "parent": "/_wrapper/_authenticated"
    },
    "/_wrapper/_authenticated/text": {
      "filePath": "_wrapper/_authenticated/text.tsx",
      "parent": "/_wrapper/_authenticated"
    },
    "/_wrapper/_authenticated/url": {
      "filePath": "_wrapper/_authenticated/url.tsx",
      "parent": "/_wrapper/_authenticated"
    },
    "/_wrapper/_authenticated/vcard": {
      "filePath": "_wrapper/_authenticated/vcard.tsx",
      "parent": "/_wrapper/_authenticated"
    },
    "/_wrapper/_authenticated/profile": {
      "filePath": "_wrapper/_authenticated/profile.lazy.tsx",
      "parent": "/_wrapper/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
