/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedVcardImport } from './routes/_authenticated/vcard'
import { Route as AuthenticatedTextImport } from './routes/_authenticated/text'
import { Route as AuthenticatedMyCodesImport } from './routes/_authenticated/my-codes'
import { Route as AuthenticatedEmailImport } from './routes/_authenticated/email'

// Create Virtual Routes

const AuthenticatedProfileLazyImport = createFileRoute(
  '/_authenticated/profile',
)()

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedProfileLazyRoute = AuthenticatedProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/profile.lazy').then((d) => d.Route),
)

const AuthenticatedVcardRoute = AuthenticatedVcardImport.update({
  id: '/vcard',
  path: '/vcard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedTextRoute = AuthenticatedTextImport.update({
  id: '/text',
  path: '/text',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedMyCodesRoute = AuthenticatedMyCodesImport.update({
  id: '/my-codes',
  path: '/my-codes',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedEmailRoute = AuthenticatedEmailImport.update({
  id: '/email',
  path: '/email',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/email': {
      id: '/_authenticated/email'
      path: '/email'
      fullPath: '/email'
      preLoaderRoute: typeof AuthenticatedEmailImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/my-codes': {
      id: '/_authenticated/my-codes'
      path: '/my-codes'
      fullPath: '/my-codes'
      preLoaderRoute: typeof AuthenticatedMyCodesImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/text': {
      id: '/_authenticated/text'
      path: '/text'
      fullPath: '/text'
      preLoaderRoute: typeof AuthenticatedTextImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/vcard': {
      id: '/_authenticated/vcard'
      path: '/vcard'
      fullPath: '/vcard'
      preLoaderRoute: typeof AuthenticatedVcardImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedEmailRoute: typeof AuthenticatedEmailRoute
  AuthenticatedMyCodesRoute: typeof AuthenticatedMyCodesRoute
  AuthenticatedTextRoute: typeof AuthenticatedTextRoute
  AuthenticatedVcardRoute: typeof AuthenticatedVcardRoute
  AuthenticatedProfileLazyRoute: typeof AuthenticatedProfileLazyRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedEmailRoute: AuthenticatedEmailRoute,
  AuthenticatedMyCodesRoute: AuthenticatedMyCodesRoute,
  AuthenticatedTextRoute: AuthenticatedTextRoute,
  AuthenticatedVcardRoute: AuthenticatedVcardRoute,
  AuthenticatedProfileLazyRoute: AuthenticatedProfileLazyRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/email': typeof AuthenticatedEmailRoute
  '/my-codes': typeof AuthenticatedMyCodesRoute
  '/text': typeof AuthenticatedTextRoute
  '/vcard': typeof AuthenticatedVcardRoute
  '/profile': typeof AuthenticatedProfileLazyRoute
  '/': typeof AuthenticatedIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/email': typeof AuthenticatedEmailRoute
  '/my-codes': typeof AuthenticatedMyCodesRoute
  '/text': typeof AuthenticatedTextRoute
  '/vcard': typeof AuthenticatedVcardRoute
  '/profile': typeof AuthenticatedProfileLazyRoute
  '/': typeof AuthenticatedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_authenticated/email': typeof AuthenticatedEmailRoute
  '/_authenticated/my-codes': typeof AuthenticatedMyCodesRoute
  '/_authenticated/text': typeof AuthenticatedTextRoute
  '/_authenticated/vcard': typeof AuthenticatedVcardRoute
  '/_authenticated/profile': typeof AuthenticatedProfileLazyRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/email'
    | '/my-codes'
    | '/text'
    | '/vcard'
    | '/profile'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/email'
    | '/my-codes'
    | '/text'
    | '/vcard'
    | '/profile'
    | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/register'
    | '/_authenticated/email'
    | '/_authenticated/my-codes'
    | '/_authenticated/text'
    | '/_authenticated/vcard'
    | '/_authenticated/profile'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/login",
        "/register"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/email",
        "/_authenticated/my-codes",
        "/_authenticated/text",
        "/_authenticated/vcard",
        "/_authenticated/profile",
        "/_authenticated/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_authenticated/email": {
      "filePath": "_authenticated/email.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/my-codes": {
      "filePath": "_authenticated/my-codes.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/text": {
      "filePath": "_authenticated/text.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/vcard": {
      "filePath": "_authenticated/vcard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/profile": {
      "filePath": "_authenticated/profile.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
